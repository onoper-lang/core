
// Este arquivo Ã© gerado automaticamente durante o build
export const DEP_LOGIC = "var __legacyDecorateClassTS = function(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n    r = Reflect.decorate(decorators, target, key, desc);\n  else\n    for (var i = decorators.length - 1;i >= 0; i--)\n      if (d = decorators[i])\n        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n// src/prebuild/utils.ts\nfunction stringToHash(str) {\n  let hash = 0;\n  for (let i = 0;i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash |= 0;\n  }\n  return hash;\n}\nfunction generateColorFromId(id) {\n  const hash = stringToHash(id);\n  const hue = Math.abs(hash % 360);\n  const saturation = 70;\n  const lightness = 85;\n  return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n}\n\n// node_modules/@lit/reactive-element/development/css-tag.js\nvar NODE_MODE = false;\nvar global = globalThis;\nvar supportsAdoptingStyleSheets = global.ShadowRoot && (global.ShadyCSS === undefined || global.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype;\nvar constructionToken = Symbol();\nvar cssTagCache = new WeakMap;\n\nclass CSSResult {\n  constructor(cssText, strings, safeToken) {\n    this[\"_$cssResult$\"] = true;\n    if (safeToken !== constructionToken) {\n      throw new Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n    }\n    this.cssText = cssText;\n    this._strings = strings;\n  }\n  get styleSheet() {\n    let styleSheet = this._styleSheet;\n    const strings = this._strings;\n    if (supportsAdoptingStyleSheets && styleSheet === undefined) {\n      const cacheable = strings !== undefined && strings.length === 1;\n      if (cacheable) {\n        styleSheet = cssTagCache.get(strings);\n      }\n      if (styleSheet === undefined) {\n        (this._styleSheet = styleSheet = new CSSStyleSheet).replaceSync(this.cssText);\n        if (cacheable) {\n          cssTagCache.set(strings, styleSheet);\n        }\n      }\n    }\n    return styleSheet;\n  }\n  toString() {\n    return this.cssText;\n  }\n}\nvar unsafeCSS = (value) => new CSSResult(typeof value === \"string\" ? value : String(value), undefined, constructionToken);\nvar adoptStyles = (renderRoot, styles) => {\n  if (supportsAdoptingStyleSheets) {\n    renderRoot.adoptedStyleSheets = styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n  } else {\n    for (const s of styles) {\n      const style = document.createElement(\"style\");\n      const nonce = global[\"litNonce\"];\n      if (nonce !== undefined) {\n        style.setAttribute(\"nonce\", nonce);\n      }\n      style.textContent = s.cssText;\n      renderRoot.appendChild(style);\n    }\n  }\n};\nvar cssResultFromStyleSheet = (sheet) => {\n  let cssText = \"\";\n  for (const rule of sheet.cssRules) {\n    cssText += rule.cssText;\n  }\n  return unsafeCSS(cssText);\n};\nvar getCompatibleStyle = supportsAdoptingStyleSheets || NODE_MODE && global.CSSStyleSheet === undefined ? (s) => s : (s) => s instanceof CSSStyleSheet ? cssResultFromStyleSheet(s) : s;\n\n// node_modules/@lit/reactive-element/development/reactive-element.js\nvar { is, defineProperty, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, getPrototypeOf } = Object;\nvar NODE_MODE2 = false;\nvar global2 = globalThis;\nif (NODE_MODE2) {\n  global2.customElements ??= customElements;\n}\nvar DEV_MODE = true;\nvar issueWarning;\nvar trustedTypes = global2.trustedTypes;\nvar emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : \"\";\nvar polyfillSupport = DEV_MODE ? global2.reactiveElementPolyfillSupportDevMode : global2.reactiveElementPolyfillSupport;\nif (DEV_MODE) {\n  global2.litIssuedWarnings ??= new Set;\n  issueWarning = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!global2.litIssuedWarnings.has(warning) && !global2.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      global2.litIssuedWarnings.add(warning);\n    }\n  };\n  queueMicrotask(() => {\n    issueWarning(\"dev-mode\", `Lit is in dev mode. Not recommended for production!`);\n    if (global2.ShadyDOM?.inUse && polyfillSupport === undefined) {\n      issueWarning(\"polyfill-support-missing\", `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` + `the \\`polyfill-support\\` module has not been loaded.`);\n    }\n  });\n}\nvar debugLogEvent = DEV_MODE ? (event) => {\n  const shouldEmit = global2.emitLitDebugLogEvents;\n  if (!shouldEmit) {\n    return;\n  }\n  global2.dispatchEvent(new CustomEvent(\"lit-debug\", {\n    detail: event\n  }));\n} : undefined;\nvar JSCompiler_renameProperty = (prop, _obj) => prop;\nvar defaultConverter = {\n  toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n  fromAttribute(value, type) {\n    let fromValue = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        try {\n          fromValue = JSON.parse(value);\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  }\n};\nvar notEqual = (value, old) => !is(value, old);\nvar defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  useDefault: false,\n  hasChanged: notEqual\n};\nSymbol.metadata ??= Symbol(\"metadata\");\nglobal2.litPropertyMetadata ??= new WeakMap;\n\nclass ReactiveElement extends HTMLElement {\n  static addInitializer(initializer) {\n    this.__prepare();\n    (this._initializers ??= []).push(initializer);\n  }\n  static get observedAttributes() {\n    this.finalize();\n    return this.__attributeToPropertyMap && [...this.__attributeToPropertyMap.keys()];\n  }\n  static createProperty(name, options = defaultPropertyDeclaration) {\n    if (options.state) {\n      options.attribute = false;\n    }\n    this.__prepare();\n    if (this.prototype.hasOwnProperty(name)) {\n      options = Object.create(options);\n      options.wrapped = true;\n    }\n    this.elementProperties.set(name, options);\n    if (!options.noAccessor) {\n      const key = DEV_MODE ? Symbol.for(`${String(name)} (@property() cache)`) : Symbol();\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        defineProperty(this.prototype, name, descriptor);\n      }\n    }\n  }\n  static getPropertyDescriptor(name, key, options) {\n    const { get, set } = getOwnPropertyDescriptor(this.prototype, name) ?? {\n      get() {\n        return this[key];\n      },\n      set(v) {\n        this[key] = v;\n      }\n    };\n    if (DEV_MODE && get == null) {\n      if (\"value\" in (getOwnPropertyDescriptor(this.prototype, name) ?? {})) {\n        throw new Error(`Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it's actually declared as a value on the prototype. ` + `Usually this is due to using @property or @state on a method.`);\n      }\n      issueWarning(\"reactive-property-without-getter\", `Field ${JSON.stringify(String(name))} on ` + `${this.name} was declared as a reactive property ` + `but it does not have a getter. This will be an error in a ` + `future version of Lit.`);\n    }\n    return {\n      get,\n      set(value) {\n        const oldValue = get?.call(this);\n        set?.call(this, value);\n        this.requestUpdate(name, oldValue, options);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  }\n  static getPropertyOptions(name) {\n    return this.elementProperties.get(name) ?? defaultPropertyDeclaration;\n  }\n  static __prepare() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty(\"elementProperties\", this))) {\n      return;\n    }\n    const superCtor = getPrototypeOf(this);\n    superCtor.finalize();\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n  }\n  static finalize() {\n    if (this.hasOwnProperty(JSCompiler_renameProperty(\"finalized\", this))) {\n      return;\n    }\n    this.finalized = true;\n    this.__prepare();\n    if (this.hasOwnProperty(JSCompiler_renameProperty(\"properties\", this))) {\n      const props = this.properties;\n      const propKeys = [\n        ...getOwnPropertyNames(props),\n        ...getOwnPropertySymbols(props)\n      ];\n      for (const p of propKeys) {\n        this.createProperty(p, props[p]);\n      }\n    }\n    const metadata = this[Symbol.metadata];\n    if (metadata !== null) {\n      const properties = litPropertyMetadata.get(metadata);\n      if (properties !== undefined) {\n        for (const [p, options] of properties) {\n          this.elementProperties.set(p, options);\n        }\n      }\n    }\n    this.__attributeToPropertyMap = new Map;\n    for (const [p, options] of this.elementProperties) {\n      const attr = this.__attributeNameForProperty(p, options);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    if (DEV_MODE) {\n      if (this.hasOwnProperty(\"createProperty\")) {\n        issueWarning(\"no-override-create-property\", \"Overriding ReactiveElement.createProperty() is deprecated. \" + \"The override will not be called with standard decorators\");\n      }\n      if (this.hasOwnProperty(\"getPropertyDescriptor\")) {\n        issueWarning(\"no-override-get-property-descriptor\", \"Overriding ReactiveElement.getPropertyDescriptor() is deprecated. \" + \"The override will not be called with standard decorators\");\n      }\n    }\n  }\n  static finalizeStyles(styles) {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      const set = new Set(styles.flat(Infinity).reverse());\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n  static __attributeNameForProperty(name, options) {\n    const attribute = options.attribute;\n    return attribute === false ? undefined : typeof attribute === \"string\" ? attribute : typeof name === \"string\" ? name.toLowerCase() : undefined;\n  }\n  constructor() {\n    super();\n    this.__instanceProperties = undefined;\n    this.isUpdatePending = false;\n    this.hasUpdated = false;\n    this.__reflectingProperty = null;\n    this.__initialize();\n  }\n  __initialize() {\n    this.__updatePromise = new Promise((res) => this.enableUpdating = res);\n    this._$changedProperties = new Map;\n    this.__saveInstanceProperties();\n    this.requestUpdate();\n    this.constructor._initializers?.forEach((i) => i(this));\n  }\n  addController(controller) {\n    (this.__controllers ??= new Set).add(controller);\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n  removeController(controller) {\n    this.__controllers?.delete(controller);\n  }\n  __saveInstanceProperties() {\n    const instanceProperties = new Map;\n    const elementProperties = this.constructor.elementProperties;\n    for (const p of elementProperties.keys()) {\n      if (this.hasOwnProperty(p)) {\n        instanceProperties.set(p, this[p]);\n        delete this[p];\n      }\n    }\n    if (instanceProperties.size > 0) {\n      this.__instanceProperties = instanceProperties;\n    }\n  }\n  createRenderRoot() {\n    const renderRoot = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);\n    adoptStyles(renderRoot, this.constructor.elementStyles);\n    return renderRoot;\n  }\n  connectedCallback() {\n    this.renderRoot ??= this.createRenderRoot();\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n  enableUpdating(_requestedUpdate) {}\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n  attributeChangedCallback(name, _old, value) {\n    this._$attributeToProperty(name, value);\n  }\n  __propertyToAttribute(name, value) {\n    const elemProperties = this.constructor.elementProperties;\n    const options = elemProperties.get(name);\n    const attr = this.constructor.__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter = options.converter?.toAttribute !== undefined ? options.converter : defaultConverter;\n      const attrValue = converter.toAttribute(value, options.type);\n      if (DEV_MODE && this.constructor.enabledWarnings.includes(\"migration\") && attrValue === undefined) {\n        issueWarning(\"undefined-attribute-value\", `The attribute value for the ${name} property is ` + `undefined on element ${this.localName}. The attribute will be ` + `removed, but in the previous version of \\`ReactiveElement\\`, ` + `the attribute would not have changed.`);\n      }\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue);\n      }\n      this.__reflectingProperty = null;\n    }\n  }\n  _$attributeToProperty(name, value) {\n    const ctor = this.constructor;\n    const propName = ctor.__attributeToPropertyMap.get(name);\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter = typeof options.converter === \"function\" ? { fromAttribute: options.converter } : options.converter?.fromAttribute !== undefined ? options.converter : defaultConverter;\n      this.__reflectingProperty = propName;\n      const convertedValue = converter.fromAttribute(value, options.type);\n      this[propName] = convertedValue ?? this.__defaultValues?.get(propName) ?? convertedValue;\n      this.__reflectingProperty = null;\n    }\n  }\n  requestUpdate(name, oldValue, options) {\n    if (name !== undefined) {\n      if (DEV_MODE && name instanceof Event) {\n        issueWarning(``, `The requestUpdate() method was called with an Event as the property name. This is probably a mistake caused by binding this.requestUpdate as an event listener. Instead bind a function that will call it with no arguments: () => this.requestUpdate()`);\n      }\n      const ctor = this.constructor;\n      const newValue = this[name];\n      options ??= ctor.getPropertyOptions(name);\n      const changed = (options.hasChanged ?? notEqual)(newValue, oldValue) || options.useDefault && options.reflect && newValue === this.__defaultValues?.get(name) && !this.hasAttribute(ctor.__attributeNameForProperty(name, options));\n      if (changed) {\n        this._$changeProperty(name, oldValue, options);\n      } else {\n        return;\n      }\n    }\n    if (this.isUpdatePending === false) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n  }\n  _$changeProperty(name, oldValue, { useDefault, reflect, wrapped }, initializeValue) {\n    if (useDefault && !(this.__defaultValues ??= new Map).has(name)) {\n      this.__defaultValues.set(name, initializeValue ?? oldValue ?? this[name]);\n      if (wrapped !== true || initializeValue !== undefined) {\n        return;\n      }\n    }\n    if (!this._$changedProperties.has(name)) {\n      if (!this.hasUpdated && !useDefault) {\n        oldValue = undefined;\n      }\n      this._$changedProperties.set(name, oldValue);\n    }\n    if (reflect === true && this.__reflectingProperty !== name) {\n      (this.__reflectingProperties ??= new Set).add(name);\n    }\n  }\n  async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      await this.__updatePromise;\n    } catch (e) {\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n  scheduleUpdate() {\n    const result = this.performUpdate();\n    if (DEV_MODE && this.constructor.enabledWarnings.includes(\"async-perform-update\") && typeof result?.then === \"function\") {\n      issueWarning(\"async-perform-update\", `Element ${this.localName} returned a Promise from performUpdate(). ` + `This behavior is deprecated and will be removed in a future ` + `version of ReactiveElement.`);\n    }\n    return result;\n  }\n  performUpdate() {\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({ kind: \"update\" });\n    if (!this.hasUpdated) {\n      this.renderRoot ??= this.createRenderRoot();\n      if (DEV_MODE) {\n        const ctor = this.constructor;\n        const shadowedProperties = [...ctor.elementProperties.keys()].filter((p) => this.hasOwnProperty(p) && (p in getPrototypeOf(this)));\n        if (shadowedProperties.length) {\n          throw new Error(`The following properties on element ${this.localName} will not ` + `trigger updates as expected because they are set using class ` + `fields: ${shadowedProperties.join(\", \")}. ` + `Native class fields and some compiled output will overwrite ` + `accessors used for detecting changes. See ` + `https://lit.dev/msg/class-field-shadowing ` + `for more information.`);\n        }\n      }\n      if (this.__instanceProperties) {\n        for (const [p, value] of this.__instanceProperties) {\n          this[p] = value;\n        }\n        this.__instanceProperties = undefined;\n      }\n      const elementProperties = this.constructor.elementProperties;\n      if (elementProperties.size > 0) {\n        for (const [p, options] of elementProperties) {\n          const { wrapped } = options;\n          const value = this[p];\n          if (wrapped === true && !this._$changedProperties.has(p) && value !== undefined) {\n            this._$changeProperty(p, undefined, options, value);\n          }\n        }\n      }\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      shouldUpdate = false;\n      this.__markUpdated();\n      throw e;\n    }\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n  willUpdate(_changedProperties) {}\n  _$didUpdate(changedProperties) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.includes(\"change-in-update\")) {\n      issueWarning(\"change-in-update\", `Element ${this.localName} scheduled an update ` + `(generally because a property was set) ` + `after an update completed, causing a new update to be scheduled. ` + `This is inefficient and should be avoided unless the next update ` + `can only be scheduled as a side effect of the previous update.`);\n    }\n  }\n  __markUpdated() {\n    this._$changedProperties = new Map;\n    this.isUpdatePending = false;\n  }\n  get updateComplete() {\n    return this.getUpdateComplete();\n  }\n  getUpdateComplete() {\n    return this.__updatePromise;\n  }\n  shouldUpdate(_changedProperties) {\n    return true;\n  }\n  update(_changedProperties) {\n    this.__reflectingProperties &&= this.__reflectingProperties.forEach((p) => this.__propertyToAttribute(p, this[p]));\n    this.__markUpdated();\n  }\n  updated(_changedProperties) {}\n  firstUpdated(_changedProperties) {}\n}\nReactiveElement.elementStyles = [];\nReactiveElement.shadowRootOptions = { mode: \"open\" };\nReactiveElement[JSCompiler_renameProperty(\"elementProperties\", ReactiveElement)] = new Map;\nReactiveElement[JSCompiler_renameProperty(\"finalized\", ReactiveElement)] = new Map;\npolyfillSupport?.({ ReactiveElement });\nif (DEV_MODE) {\n  ReactiveElement.enabledWarnings = [\n    \"change-in-update\",\n    \"async-perform-update\"\n  ];\n  const ensureOwnWarnings = function(ctor) {\n    if (!ctor.hasOwnProperty(JSCompiler_renameProperty(\"enabledWarnings\", ctor))) {\n      ctor.enabledWarnings = ctor.enabledWarnings.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function(warning) {\n    ensureOwnWarnings(this);\n    if (!this.enabledWarnings.includes(warning)) {\n      this.enabledWarnings.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function(warning) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings.splice(i, 1);\n    }\n  };\n}\n(global2.reactiveElementVersions ??= []).push(\"2.1.1\");\nif (DEV_MODE && global2.reactiveElementVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning(\"multiple-versions\", `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n  });\n}\n\n// node_modules/lit-html/development/lit-html.js\nvar DEV_MODE2 = true;\nvar ENABLE_EXTRA_SECURITY_HOOKS = true;\nvar ENABLE_SHADYDOM_NOPATCH = true;\nvar NODE_MODE3 = false;\nvar global3 = globalThis;\nvar debugLogEvent2 = DEV_MODE2 ? (event) => {\n  const shouldEmit = global3.emitLitDebugLogEvents;\n  if (!shouldEmit) {\n    return;\n  }\n  global3.dispatchEvent(new CustomEvent(\"lit-debug\", {\n    detail: event\n  }));\n} : undefined;\nvar debugLogRenderId = 0;\nvar issueWarning2;\nif (DEV_MODE2) {\n  global3.litIssuedWarnings ??= new Set;\n  issueWarning2 = (code, warning) => {\n    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : \"\";\n    if (!global3.litIssuedWarnings.has(warning) && !global3.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      global3.litIssuedWarnings.add(warning);\n    }\n  };\n  queueMicrotask(() => {\n    issueWarning2(\"dev-mode\", `Lit is in dev mode. Not recommended for production!`);\n  });\n}\nvar wrap = ENABLE_SHADYDOM_NOPATCH && global3.ShadyDOM?.inUse && global3.ShadyDOM?.noPatch === true ? global3.ShadyDOM.wrap : (node) => node;\nvar trustedTypes2 = global3.trustedTypes;\nvar policy = trustedTypes2 ? trustedTypes2.createPolicy(\"lit-html\", {\n  createHTML: (s) => s\n}) : undefined;\nvar identityFunction = (value) => value;\nvar noopSanitizer = (_node, _name, _type) => identityFunction;\nvar setSanitizer = (newSanitizer) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(`Attempted to overwrite existing lit-html security policy.` + ` setSanitizeDOMValueFactory should be called at most once.`);\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\nvar _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\nvar createSanitizer = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\nvar boundAttributeSuffix = \"$lit$\";\nvar marker = `lit$${Math.random().toFixed(9).slice(2)}$`;\nvar markerMatch = \"?\" + marker;\nvar nodeMarker = `<${markerMatch}>`;\nvar d = NODE_MODE3 && global3.document === undefined ? {\n  createTreeWalker() {\n    return {};\n  }\n} : document;\nvar createMarker = () => d.createComment(\"\");\nvar isPrimitive = (value) => value === null || typeof value != \"object\" && typeof value != \"function\";\nvar isArray = Array.isArray;\nvar isIterable = (value) => isArray(value) || typeof value?.[Symbol.iterator] === \"function\";\nvar SPACE_CHAR = `[ \t\n\\f\\r]`;\nvar ATTR_VALUE_CHAR = `[^ \t\n\\f\\r\"'\\`<>=]`;\nvar NAME_CHAR = `[^\\\\s\"'>=/]`;\nvar textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nvar COMMENT_START = 1;\nvar TAG_NAME = 2;\nvar DYNAMIC_TAG_NAME = 3;\nvar commentEndRegex = /-->/g;\nvar comment2EndRegex = />/g;\nvar tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`, \"g\");\nvar ENTIRE_MATCH = 0;\nvar ATTRIBUTE_NAME = 1;\nvar SPACES_AND_EQUALS = 2;\nvar QUOTE_CHAR = 3;\nvar singleQuoteAttrEndRegex = /'/g;\nvar doubleQuoteAttrEndRegex = /\"/g;\nvar rawTextElement = /^(?:script|style|textarea|title)$/i;\nvar HTML_RESULT = 1;\nvar SVG_RESULT = 2;\nvar MATHML_RESULT = 3;\nvar ATTRIBUTE_PART = 1;\nvar CHILD_PART = 2;\nvar PROPERTY_PART = 3;\nvar BOOLEAN_ATTRIBUTE_PART = 4;\nvar EVENT_PART = 5;\nvar ELEMENT_PART = 6;\nvar COMMENT_PART = 7;\nvar tag = (type) => (strings, ...values) => {\n  if (DEV_MODE2 && strings.some((s) => s === undefined)) {\n    console.warn(`Some template strings are undefined.\n` + \"This is probably caused by illegal octal escape sequences.\");\n  }\n  if (DEV_MODE2) {\n    if (values.some((val) => val?.[\"_$litStatic$\"])) {\n      issueWarning2(\"\", `Static values 'literal' or 'unsafeStatic' cannot be used as values to non-static templates.\n` + `Please use the static 'html' tag function. See https://lit.dev/docs/templates/expressions/#static-expressions`);\n    }\n  }\n  return {\n    [\"_$litType$\"]: type,\n    strings,\n    values\n  };\n};\nvar html = tag(HTML_RESULT);\nvar svg = tag(SVG_RESULT);\nvar mathml = tag(MATHML_RESULT);\nvar noChange = Symbol.for(\"lit-noChange\");\nvar nothing = Symbol.for(\"lit-nothing\");\nvar templateCache = new WeakMap;\nvar walker = d.createTreeWalker(d, 129);\nvar sanitizerFactoryInternal = noopSanitizer;\nfunction trustFromTemplateString(tsa, stringFromTSA) {\n  if (!isArray(tsa) || !tsa.hasOwnProperty(\"raw\")) {\n    let message = \"invalid template strings array\";\n    if (DEV_MODE2) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n          If you're using the html or svg tagged template functions normally\n          and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `.trim().replace(/\\n */g, `\n`);\n    }\n    throw new Error(message);\n  }\n  return policy !== undefined ? policy.createHTML(stringFromTSA) : stringFromTSA;\n}\nvar getTemplateHtml = (strings, type) => {\n  const l = strings.length - 1;\n  const attrNames = [];\n  let html2 = type === SVG_RESULT ? \"<svg>\" : type === MATHML_RESULT ? \"<math>\" : \"\";\n  let rawTextEndRegex;\n  let regex = textEndRegex;\n  for (let i = 0;i < l; i++) {\n    const s = strings[i];\n    let attrNameEndIndex = -1;\n    let attrName;\n    let lastIndex = 0;\n    let match;\n    while (lastIndex < s.length) {\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === \"!--\") {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, \"g\");\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE2) {\n            throw new Error(\"Bindings in tag names are not supported. Please use static templates instead. \" + \"See https://lit.dev/docs/templates/expressions/#static-expressions\");\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === \">\") {\n          regex = rawTextEndRegex ?? textEndRegex;\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex = match[QUOTE_CHAR] === undefined ? tagEndRegex : match[QUOTE_CHAR] === '\"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;\n        }\n      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n    if (DEV_MODE2) {\n      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, \"unexpected parse state B\");\n    }\n    const end = regex === tagEndRegex && strings[i + 1].startsWith(\"/>\") ? \" \" : \"\";\n    html2 += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? i : end);\n  }\n  const htmlResult = html2 + (strings[l] || \"<?>\") + (type === SVG_RESULT ? \"</svg>\" : type === MATHML_RESULT ? \"</math>\" : \"\");\n  return [trustFromTemplateString(strings, htmlResult), attrNames];\n};\n\nclass Template {\n  constructor({ strings, [\"_$litType$\"]: type }, options) {\n    this.parts = [];\n    let node;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n    const [html2, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html2, options);\n    walker.currentNode = this.el.content;\n    if (type === SVG_RESULT || type === MATHML_RESULT) {\n      const wrapper = this.el.content.firstChild;\n      wrapper.replaceWith(...wrapper.childNodes);\n    }\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE2) {\n          const tag2 = node.localName;\n          if (/^(?:textarea|template)$/i.test(tag2) && node.innerHTML.includes(marker)) {\n            const m = `Expressions are not supported inside \\`${tag2}\\` ` + `elements. See https://lit.dev/msg/expression-in-${tag2} for more ` + `information.`;\n            if (tag2 === \"template\") {\n              throw new Error(m);\n            } else\n              issueWarning2(\"\", m);\n          }\n        }\n        if (node.hasAttributes()) {\n          for (const name of node.getAttributeNames()) {\n            if (name.endsWith(boundAttributeSuffix)) {\n              const realName = attrNames[attrNameIndex++];\n              const value = node.getAttribute(name);\n              const statics = value.split(marker);\n              const m = /([.?@])?(.*)/.exec(realName);\n              parts.push({\n                type: ATTRIBUTE_PART,\n                index: nodeIndex,\n                name: m[2],\n                strings: statics,\n                ctor: m[1] === \".\" ? PropertyPart : m[1] === \"?\" ? BooleanAttributePart : m[1] === \"@\" ? EventPart : AttributePart\n              });\n              node.removeAttribute(name);\n            } else if (name.startsWith(marker)) {\n              parts.push({\n                type: ELEMENT_PART,\n                index: nodeIndex\n              });\n              node.removeAttribute(name);\n            }\n          }\n        }\n        if (rawTextElement.test(node.tagName)) {\n          const strings2 = node.textContent.split(marker);\n          const lastIndex = strings2.length - 1;\n          if (lastIndex > 0) {\n            node.textContent = trustedTypes2 ? trustedTypes2.emptyScript : \"\";\n            for (let i = 0;i < lastIndex; i++) {\n              node.append(strings2[i], createMarker());\n              walker.nextNode();\n              parts.push({ type: CHILD_PART, index: ++nodeIndex });\n            }\n            node.append(strings2[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = node.data;\n        if (data === markerMatch) {\n          parts.push({ type: CHILD_PART, index: nodeIndex });\n        } else {\n          let i = -1;\n          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n            parts.push({ type: COMMENT_PART, index: nodeIndex });\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    if (DEV_MODE2) {\n      if (attrNames.length !== attrNameIndex) {\n        throw new Error(`Detected duplicate attribute bindings. This occurs if your template ` + `has duplicate attributes on an element tag. For example ` + `\"<input ?disabled=\\${true} ?disabled=\\${false}>\" contains a ` + `duplicate \"disabled\" attribute. The error was detected in ` + `the following template: \n` + \"`\" + strings.join(\"${...}\") + \"`\");\n      }\n    }\n    debugLogEvent2 && debugLogEvent2({\n      kind: \"template prep\",\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings\n    });\n  }\n  static createElement(html2, _options) {\n    const el = d.createElement(\"template\");\n    el.innerHTML = html2;\n    return el;\n  }\n}\nfunction resolveDirective(part, value, parent = part, attributeIndex) {\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective = attributeIndex !== undefined ? parent.__directives?.[attributeIndex] : parent.__directive;\n  const nextDirectiveConstructor = isPrimitive(value) ? undefined : value[\"_$litDirective$\"];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    currentDirective?.[\"_$notifyDirectiveConnectionChanged\"]?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      (parent.__directives ??= [])[attributeIndex] = currentDirective;\n    } else {\n      parent.__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);\n  }\n  return value;\n}\n\nclass TemplateInstance {\n  constructor(template, parent) {\n    this._$parts = [];\n    this._$disconnectableChildren = undefined;\n    this._$template = template;\n    this._$parent = parent;\n  }\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n  _clone(options) {\n    const { el: { content }, parts } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n    let node = walker.nextNode();\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(node, node.nextSibling, this, options);\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node, this, options);\n        }\n        this._$parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode();\n        nodeIndex++;\n      }\n    }\n    walker.currentNode = d;\n    return fragment;\n  }\n  _update(values) {\n    let i = 0;\n    for (const part of this._$parts) {\n      if (part !== undefined) {\n        debugLogEvent2 && debugLogEvent2({\n          kind: \"set part\",\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this\n        });\n        if (part.strings !== undefined) {\n          part._$setValue(values, part, i);\n          i += part.strings.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\nclass ChildPart {\n  get _$isConnected() {\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n  constructor(startNode, endNode, parent, options) {\n    this.type = CHILD_PART;\n    this._$committedValue = nothing;\n    this._$disconnectableChildren = undefined;\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._textSanitizer = undefined;\n    }\n  }\n  get parentNode() {\n    let parentNode = wrap(this._$startNode).parentNode;\n    const parent = this._$parent;\n    if (parent !== undefined && parentNode?.nodeType === 11) {\n      parentNode = parent.parentNode;\n    }\n    return parentNode;\n  }\n  get startNode() {\n    return this._$startNode;\n  }\n  get endNode() {\n    return this._$endNode;\n  }\n  _$setValue(value, directiveParent = this) {\n    if (DEV_MODE2 && this.parentNode === null) {\n      throw new Error(`This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`);\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      if (value === nothing || value == null || value === \"\") {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent2 && debugLogEvent2({\n            kind: \"commit nothing to child\",\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options\n          });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n    } else if (value[\"_$litType$\"] !== undefined) {\n      this._commitTemplateResult(value);\n    } else if (value.nodeType !== undefined) {\n      if (DEV_MODE2 && this.options?.host === value) {\n        this._commitText(`[probable mistake: rendered a template's host in itself ` + `(commonly caused by writing \\${this} in a template]`);\n        console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);\n        return;\n      }\n      this._commitNode(value);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      this._commitText(value);\n    }\n  }\n  _insert(node) {\n    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);\n  }\n  _commitNode(value) {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === \"STYLE\" || parentNodeName === \"SCRIPT\") {\n          let message = \"Forbidden\";\n          if (DEV_MODE2) {\n            if (parentNodeName === \"STYLE\") {\n              message = `Lit does not support binding inside style nodes. ` + `This is a security risk, as style injection attacks can ` + `exfiltrate data and spoof UIs. ` + `Consider instead using css\\`...\\` literals ` + `to compose styles, and do dynamic styling with ` + `css custom properties, ::parts, <slot>s, ` + `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message = `Lit does not support binding inside script nodes. ` + `This is a security risk, as it could allow arbitrary ` + `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"commit node\",\n        start: this._$startNode,\n        parent: this._$parent,\n        value,\n        options: this.options\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n  _commitText(value) {\n    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {\n      const node = wrap(this._$startNode).nextSibling;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, \"data\", \"property\");\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"commit text\",\n        node,\n        value,\n        options: this.options\n      });\n      node.data = value;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = d.createTextNode(\"\");\n        this._commitNode(textNode);\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, \"data\", \"property\");\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent2 && debugLogEvent2({\n          kind: \"commit text\",\n          node: textNode,\n          value,\n          options: this.options\n        });\n        textNode.data = value;\n      } else {\n        this._commitNode(d.createTextNode(value));\n        debugLogEvent2 && debugLogEvent2({\n          kind: \"commit text\",\n          node: wrap(this._$startNode).nextSibling,\n          value,\n          options: this.options\n        });\n      }\n    }\n    this._$committedValue = value;\n  }\n  _commitTemplateResult(result) {\n    const { values, [\"_$litType$\"]: type } = result;\n    const template = typeof type === \"number\" ? this._$getTemplate(result) : (type.el === undefined && (type.el = Template.createElement(trustFromTemplateString(type.h, type.h[0]), this.options)), type);\n    if (this._$committedValue?._$template === template) {\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"template updating\",\n        template,\n        instance: this._$committedValue,\n        parts: this._$committedValue._$parts,\n        options: this.options,\n        values\n      });\n      this._$committedValue._update(values);\n    } else {\n      const instance = new TemplateInstance(template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"template instantiated\",\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values\n      });\n      instance._update(values);\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"template instantiated and updated\",\n        template,\n        instance,\n        parts: instance._$parts,\n        options: this.options,\n        fragment,\n        values\n      });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n  _$getTemplate(result) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, template = new Template(result));\n    }\n    return template;\n  }\n  _commitIterable(value) {\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n    const itemParts = this._$committedValue;\n    let partIndex = 0;\n    let itemPart;\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        itemParts.push(itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));\n      } else {\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n    if (partIndex < itemParts.length) {\n      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);\n      itemParts.length = partIndex;\n    }\n  }\n  _$clear(start = wrap(this._$startNode).nextSibling, from) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start !== this._$endNode) {\n      const n = wrap(start).nextSibling;\n      wrap(start).remove();\n      start = n;\n    }\n  }\n  setConnected(isConnected) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE2) {\n      throw new Error(\"part.setConnected() may only be called on a \" + \"RootPart returned from render().\");\n    }\n  }\n}\n\nclass AttributePart {\n  get tagName() {\n    return this.element.tagName;\n  }\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n  constructor(element, name, strings, parent, options) {\n    this.type = ATTRIBUTE_PART;\n    this._$committedValue = nothing;\n    this._$disconnectableChildren = undefined;\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== \"\" || strings[1] !== \"\") {\n      this._$committedValue = new Array(strings.length - 1).fill(new String);\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n  _$setValue(value, directiveParent = this, valueIndex, noCommit) {\n    const strings = this.strings;\n    let change = false;\n    if (strings === undefined) {\n      value = resolveDirective(this, value, directiveParent, 0);\n      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      const values = value;\n      value = strings[0];\n      let i, v;\n      for (i = 0;i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex + i], directiveParent, i);\n        if (v === noChange) {\n          v = this._$committedValue[i];\n        }\n        change ||= !isPrimitive(v) || v !== this._$committedValue[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? \"\") + strings[i + 1];\n        }\n        this._$committedValue[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n  _commitValue(value) {\n    if (value === nothing) {\n      wrap(this.element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, \"attribute\");\n        }\n        value = this._sanitizer(value ?? \"\");\n      }\n      debugLogEvent2 && debugLogEvent2({\n        kind: \"commit attribute\",\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options\n      });\n      wrap(this.element).setAttribute(this.name, value ?? \"\");\n    }\n  }\n}\n\nclass PropertyPart extends AttributePart {\n  constructor() {\n    super(...arguments);\n    this.type = PROPERTY_PART;\n  }\n  _commitValue(value) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, \"property\");\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent2 && debugLogEvent2({\n      kind: \"commit property\",\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options\n    });\n    this.element[this.name] = value === nothing ? undefined : value;\n  }\n}\n\nclass BooleanAttributePart extends AttributePart {\n  constructor() {\n    super(...arguments);\n    this.type = BOOLEAN_ATTRIBUTE_PART;\n  }\n  _commitValue(value) {\n    debugLogEvent2 && debugLogEvent2({\n      kind: \"commit boolean attribute\",\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options\n    });\n    wrap(this.element).toggleAttribute(this.name, !!value && value !== nothing);\n  }\n}\n\nclass EventPart extends AttributePart {\n  constructor(element, name, strings, parent, options) {\n    super(element, name, strings, parent, options);\n    this.type = EVENT_PART;\n    if (DEV_MODE2 && this.strings !== undefined) {\n      throw new Error(`A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` + \"invalid content. Event listeners in templates must have exactly \" + \"one expression and no surrounding text.\");\n    }\n  }\n  _$setValue(newListener, directiveParent = this) {\n    newListener = resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;\n    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);\n    debugLogEvent2 && debugLogEvent2({\n      kind: \"commit event listener\",\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener\n    });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(this.name, this, oldListener);\n    }\n    if (shouldAddListener) {\n      this.element.addEventListener(this.name, this, newListener);\n    }\n    this._$committedValue = newListener;\n  }\n  handleEvent(event) {\n    if (typeof this._$committedValue === \"function\") {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      this._$committedValue.handleEvent(event);\n    }\n  }\n}\n\nclass ElementPart {\n  constructor(element, parent, options) {\n    this.element = element;\n    this.type = ELEMENT_PART;\n    this._$disconnectableChildren = undefined;\n    this._$parent = parent;\n    this.options = options;\n  }\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n  _$setValue(value) {\n    debugLogEvent2 && debugLogEvent2({\n      kind: \"commit to element binding\",\n      element: this.element,\n      value,\n      options: this.options\n    });\n    resolveDirective(this, value);\n  }\n}\nvar polyfillSupport2 = DEV_MODE2 ? global3.litHtmlPolyfillSupportDevMode : global3.litHtmlPolyfillSupport;\npolyfillSupport2?.(Template, ChildPart);\n(global3.litHtmlVersions ??= []).push(\"3.3.1\");\nif (DEV_MODE2 && global3.litHtmlVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning2(\"multiple-versions\", `Multiple versions of Lit loaded. ` + `Loading multiple versions is not recommended.`);\n  });\n}\nvar render = (value, container, options) => {\n  if (DEV_MODE2 && container == null) {\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE2 ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  let part = partOwnerNode[\"_$litPart$\"];\n  debugLogEvent2 && debugLogEvent2({\n    kind: \"begin render\",\n    id: renderId,\n    value,\n    container,\n    options,\n    part\n  });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    partOwnerNode[\"_$litPart$\"] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options ?? {});\n  }\n  part._$setValue(value);\n  debugLogEvent2 && debugLogEvent2({\n    kind: \"end render\",\n    id: renderId,\n    value,\n    container,\n    options,\n    part\n  });\n  return part;\n};\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE2) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\n// node_modules/lit-element/development/lit-element.js\nvar JSCompiler_renameProperty2 = (prop, _obj) => prop;\nvar DEV_MODE3 = true;\nvar global4 = globalThis;\nvar issueWarning3;\nif (DEV_MODE3) {\n  global4.litIssuedWarnings ??= new Set;\n  issueWarning3 = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!global4.litIssuedWarnings.has(warning) && !global4.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      global4.litIssuedWarnings.add(warning);\n    }\n  };\n}\n\nclass LitElement extends ReactiveElement {\n  constructor() {\n    super(...arguments);\n    this.renderOptions = { host: this };\n    this.__childPart = undefined;\n  }\n  createRenderRoot() {\n    const renderRoot = super.createRenderRoot();\n    this.renderOptions.renderBefore ??= renderRoot.firstChild;\n    return renderRoot;\n  }\n  update(changedProperties) {\n    const value = this.render();\n    if (!this.hasUpdated) {\n      this.renderOptions.isConnected = this.isConnected;\n    }\n    super.update(changedProperties);\n    this.__childPart = render(value, this.renderRoot, this.renderOptions);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.__childPart?.setConnected(true);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__childPart?.setConnected(false);\n  }\n  render() {\n    return noChange;\n  }\n}\nLitElement[\"_$litElement$\"] = true;\nLitElement[JSCompiler_renameProperty2(\"finalized\", LitElement)] = true;\nglobal4.litElementHydrateSupport?.({ LitElement });\nvar polyfillSupport3 = DEV_MODE3 ? global4.litElementPolyfillSupportDevMode : global4.litElementPolyfillSupport;\npolyfillSupport3?.({ LitElement });\n(global4.litElementVersions ??= []).push(\"4.2.1\");\nif (DEV_MODE3 && global4.litElementVersions.length > 1) {\n  queueMicrotask(() => {\n    issueWarning3(\"multiple-versions\", `Multiple versions of Lit loaded. Loading multiple versions ` + `is not recommended.`);\n  });\n}\n// node_modules/@lit/reactive-element/development/decorators/custom-element.js\nvar customElement = (tagName) => (classOrTarget, context) => {\n  if (context !== undefined) {\n    context.addInitializer(() => {\n      customElements.define(tagName, classOrTarget);\n    });\n  } else {\n    customElements.define(tagName, classOrTarget);\n  }\n};\n// node_modules/@lit/reactive-element/development/decorators/property.js\nvar DEV_MODE4 = true;\nvar issueWarning4;\nif (DEV_MODE4) {\n  globalThis.litIssuedWarnings ??= new Set;\n  issueWarning4 = (code, warning) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!globalThis.litIssuedWarnings.has(warning) && !globalThis.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings.add(warning);\n    }\n  };\n}\nvar legacyProperty = (options, proto, name) => {\n  const hasOwnProperty = proto.hasOwnProperty(name);\n  proto.constructor.createProperty(name, options);\n  return hasOwnProperty ? Object.getOwnPropertyDescriptor(proto, name) : undefined;\n};\nvar defaultPropertyDeclaration2 = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\nvar standardProperty = (options = defaultPropertyDeclaration2, target, context) => {\n  const { kind, metadata } = context;\n  if (DEV_MODE4 && metadata == null) {\n    issueWarning4(\"missing-class-metadata\", `The class ${target} is missing decorator metadata. This ` + `could mean that you're using a compiler that supports decorators ` + `but doesn't support decorator metadata, such as TypeScript 5.1. ` + `Please update your compiler.`);\n  }\n  let properties = globalThis.litPropertyMetadata.get(metadata);\n  if (properties === undefined) {\n    globalThis.litPropertyMetadata.set(metadata, properties = new Map);\n  }\n  if (kind === \"setter\") {\n    options = Object.create(options);\n    options.wrapped = true;\n  }\n  properties.set(context.name, options);\n  if (kind === \"accessor\") {\n    const { name } = context;\n    return {\n      set(v) {\n        const oldValue = target.get.call(this);\n        target.set.call(this, v);\n        this.requestUpdate(name, oldValue, options);\n      },\n      init(v) {\n        if (v !== undefined) {\n          this._$changeProperty(name, undefined, options, v);\n        }\n        return v;\n      }\n    };\n  } else if (kind === \"setter\") {\n    const { name } = context;\n    return function(value) {\n      const oldValue = this[name];\n      target.call(this, value);\n      this.requestUpdate(name, oldValue, options);\n    };\n  }\n  throw new Error(`Unsupported decorator location: ${kind}`);\n};\nfunction property(options) {\n  return (protoOrTarget, nameOrContext) => {\n    return typeof nameOrContext === \"object\" ? standardProperty(options, protoOrTarget, nameOrContext) : legacyProperty(options, protoOrTarget, nameOrContext);\n  };\n}\n// node_modules/@lit/reactive-element/development/decorators/query.js\nvar DEV_MODE5 = true;\nvar issueWarning5;\nif (DEV_MODE5) {\n  globalThis.litIssuedWarnings ??= new Set;\n  issueWarning5 = (code, warning) => {\n    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : \"\";\n    if (!globalThis.litIssuedWarnings.has(warning) && !globalThis.litIssuedWarnings.has(code)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings.add(warning);\n    }\n  };\n}\n// src/prebuild/components/atoms/ClaimIcon/index.ts\nclass ClaimIconComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { size = 18 } = this.props;\n    return html`\n            <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M12 15.75C12.4142 15.75 12.75 16.0858 12.75 16.5V17.25C12.75 17.6642 12.4142 18 12 18C11.5858 18 11.25 17.6642 11.25 17.25V16.5C11.25 16.0858 11.5858 15.75 12 15.75Z\" fill=\"black\"/>\n                <path d=\"M12 6C11.5432 6 11.1272 6.26613 10.9632 6.69244C10.7515 7.24287 10.5 7.99726 10.5 8.475C10.5 10.2317 10.8779 12.4041 11.0972 13.517C11.182 13.9475 11.5613 14.25 12 14.25C12.4387 14.25 12.818 13.9475 12.9028 13.517C13.1221 12.4041 13.5 10.2317 13.5 8.475C13.5 7.99726 13.2485 7.24287 13.0368 6.69243C12.8728 6.26613 12.4568 6 12 6Z\" fill=\"black\"/>\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 2.25C6.61522 2.25 2.25 6.61522 2.25 12C2.25 17.3848 6.61522 21.75 12 21.75C17.3848 21.75 21.75 17.3848 21.75 12C21.75 6.61522 17.3848 2.25 12 2.25ZM3.75 12C3.75 7.44365 7.44365 3.75 12 3.75C16.5563 3.75 20.25 7.44365 20.25 12C20.25 16.5563 16.5563 20.25 12 20.25C7.44365 20.25 3.75 16.5563 3.75 12Z\" fill=\"black\"/>\n            </svg>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], ClaimIconComponent.prototype, \"props\", undefined);\nClaimIconComponent = __legacyDecorateClassTS([\n  customElement(\"claim-icon\")\n], ClaimIconComponent);\nfunction ClaimIcon(props) {\n  const element = new ClaimIconComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/atoms/CommentIcon/index.ts\nclass CommentIconComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { size = 18 } = this.props;\n    return html`\n            <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M8.25 8.25C7.83579 8.25 7.5 8.58579 7.5 9C7.5 9.41421 7.83579 9.75 8.25 9.75H11.25C11.6642 9.75 12 9.41421 12 9C12 8.58579 11.6642 8.25 11.25 8.25H8.25Z\" fill=\"black\"/>\n                <path d=\"M7.5 15C7.5 14.5858 7.83579 14.25 8.25 14.25H14.25C14.6642 14.25 15 14.5858 15 15C15 15.4142 14.6642 15.75 14.25 15.75H8.25C7.83579 15.75 7.5 15.4142 7.5 15Z\" fill=\"black\"/>\n                <path d=\"M8.25 11.25C7.83579 11.25 7.5 11.5858 7.5 12C7.5 12.4142 7.83579 12.75 8.25 12.75H15.75C16.1642 12.75 16.5 12.4142 16.5 12C16.5 11.5858 16.1642 11.25 15.75 11.25H8.25Z\" fill=\"black\"/>\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C13.4468 21 14.8158 20.6581 16.0287 20.05C16.0361 20.0504 16.045 20.0512 16.0553 20.0523C16.1417 20.0614 16.271 20.09 16.4506 20.1459C16.7399 20.236 17.068 20.3666 17.4366 20.5134C17.5328 20.5517 17.6318 20.5911 17.7336 20.6312C18.196 20.8133 18.7204 21.0106 19.1907 21.1055C19.4273 21.1532 19.6921 21.1843 19.9531 21.1562C20.2197 21.1275 20.5296 21.031 20.7802 20.7804C21.031 20.5298 21.1275 20.2199 21.1562 19.9533C21.1843 19.6922 21.1533 19.4274 21.1055 19.1908C21.0106 18.7206 20.8132 18.1963 20.6311 17.734C20.5911 17.6324 20.5518 17.5337 20.5136 17.4377C20.3667 17.0688 20.2359 16.7405 20.1458 16.451C20.0898 16.2714 20.0613 16.1421 20.0522 16.0557L20.0508 16.0416L20.0499 16.0289C20.658 14.8159 21 13.4469 21 12C21 7.02944 16.9706 3 12 3ZM4.5 12C4.5 7.85786 7.85786 4.5 12 4.5C16.1421 4.5 19.5 7.85786 19.5 12C19.5 13.2289 19.205 14.3868 18.6826 15.4086C18.5353 15.6968 18.538 16.0016 18.5605 16.2137C18.5846 16.441 18.6451 16.677 18.7136 16.8969C18.8228 17.2477 18.9823 17.6476 19.1315 18.0219C19.167 18.1109 19.2019 18.1985 19.2355 18.2837C19.4215 18.7559 19.57 19.1647 19.6352 19.4876C19.6493 19.5575 19.6577 19.6153 19.6623 19.6623C19.6152 19.6577 19.5573 19.6492 19.4874 19.6351C19.1643 19.5699 18.7554 19.4214 18.2832 19.2355C18.1979 19.2019 18.1101 19.1669 18.0208 19.1313C17.6467 18.9822 17.2471 18.8229 16.8966 18.7137C16.6767 18.6453 16.4408 18.5847 16.2136 18.5606C16.0017 18.5381 15.6968 18.5353 15.4086 18.6826C14.3868 19.205 13.2289 19.5 12 19.5C7.85786 19.5 4.5 16.1421 4.5 12ZM20.0492 16.0006C20.0495 15.9983 20.0496 15.997 20.0495 15.997C20.0495 15.997 20.0496 15.9968 20.0495 15.997C20.0495 15.9971 20.0494 15.9976 20.0494 15.9978L20.0492 16.0006Z\" fill=\"black\"/>\n            </svg>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], CommentIconComponent.prototype, \"props\", undefined);\nCommentIconComponent = __legacyDecorateClassTS([\n  customElement(\"comment-icon\")\n], CommentIconComponent);\nfunction CommentIcon(props) {\n  const element = new CommentIconComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/molecules/ActivableButton/index.ts\nclass ActivableButtonComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { label, activable, children, className, style } = this.props;\n    return html`\n            <button\n                class=\"onoper-activable-button ${className || \"\"}\"\n                style=\"${style || \"\"}\"\n                ${activable ? \"\" : \"disabled\"}\n                aria-label=\"${label}\"\n            >\n                ${children}\n                <span class=\"onoper-button-label\">${label}</span>\n            </button>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], ActivableButtonComponent.prototype, \"props\", undefined);\nActivableButtonComponent = __legacyDecorateClassTS([\n  customElement(\"activable-button\")\n], ActivableButtonComponent);\nfunction ActivableButton(props) {\n  const element = new ActivableButtonComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/atoms/AccordionToggleIcon/index.ts\nclass AccordionToggleIconComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { size = 18 } = this.props;\n    return html`\n            <svg width=\"${size}\" height=\"${size}\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.46967 6.96973C2.76256 6.67684 3.23743 6.67684 3.53033 6.96973L12 15.4393L20.4697 6.96973C20.7626 6.67684 21.2374 6.67684 21.5303 6.96973C21.8232 7.26263 21.8232 7.7375 21.5303 8.03039L12.5303 17.0303C12.2374 17.3232 11.7626 17.3232 11.4697 17.0303L2.46967 8.03039C2.17678 7.7375 2.17678 7.26263 2.46967 6.96973Z\" fill=\"#5F5F5F\"/>\n            </svg>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], AccordionToggleIconComponent.prototype, \"props\", undefined);\nAccordionToggleIconComponent = __legacyDecorateClassTS([\n  customElement(\"accordion-toggle-icon\")\n], AccordionToggleIconComponent);\nfunction AccordionToggleIcon(props) {\n  const element = new AccordionToggleIconComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/molecules/ContentAccordion/index.ts\nclass ContentAccordionComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { icon, title, list, className } = this.props;\n    const iconElement = html`\n            <span class=\"accordion-icon\">${icon}</span>\n        `;\n    const listItemElement = (item) => html`\n            <li>${item}</li>\n        `;\n    return html`\n            <div\n                class=\"onoper-content-accordion ${className || \"\"}\"\n                data-active=\"${list.length > 0}\"\n            >\n                <div class=\"onoper-content-accordion-header\">\n                    ${icon ? iconElement : \"\"}\n                    <h3>${title}</h3>\n                    <span class=\"accordion-toggle\">\n                        ${AccordionToggleIcon({})}\n                    </span>\n                </div>\n                <div class=\"onoper-content-accordion-body\">\n                    <ul>\n                        ${list.map((item) => listItemElement(item))}\n                    </ul>\n                </div>\n            </div>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], ContentAccordionComponent.prototype, \"props\", undefined);\nContentAccordionComponent = __legacyDecorateClassTS([\n  customElement(\"content-accordion\")\n], ContentAccordionComponent);\nfunction ContentAccordion(props) {\n  const element = new ContentAccordionComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/molecules/GroupCardFooter/index.ts\nclass GroupCardFooterComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { links, claims, comments } = this.props;\n    const linkElement = (link) => html`\n            <span\n                class=\"onoper-group-footer-link\"\n                aria-label=\"${link}\"\n                style=\"background-color: ${generateColorFromId(link)};\"\n            ></span>\n        `;\n    return html`\n            <div class=\"onoper-group-card-footer\">\n                ${ContentAccordion({\n      title: \"Problemas\",\n      list: claims,\n      icon: ActivableButton({\n        activable: claims.length > 0,\n        label: \"Problemas\",\n        children: ClaimIcon({}),\n        style: `background-color: var(--CLAIM_COLOR);`\n      })\n    })}\n                ${ContentAccordion({\n      title: \"ComentÃ¡rios\",\n      list: comments,\n      icon: ActivableButton({\n        activable: comments.length > 0,\n        label: \"ComentÃ¡rios\",\n        children: CommentIcon({}),\n        style: `background-color: var(--COMMENT_COLOR);`\n      })\n    })}\n                <span class=\"onoper-group-footer-links\">\n                    ${links.map((link) => linkElement(link))}\n                </span>\n            </div>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], GroupCardFooterComponent.prototype, \"props\", undefined);\nGroupCardFooterComponent = __legacyDecorateClassTS([\n  customElement(\"group-card-footer\")\n], GroupCardFooterComponent);\nfunction GroupCardFooter(props) {\n  const element = new GroupCardFooterComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/organisms/GroupCard/index.ts\nfunction GroupCard(props) {\n  const { named, title, links, claims, comments, className, children, uid } = props;\n  return html`\n        <div\n            id=\"id_${uid}\"\n            class=\"onoper-group-card ${className || \"\"}\"\n        >\n            <div\n                class=\"onoper-group-card-header\"\n                ${named ? `data-named` : \"\"}\n            >\n                ${named ? html`<span\n                        class=\"onoper-group-card-header-named\"\n                        aria-label=\"${named}\"\n                        style=\"background-color: ${generateColorFromId(named)};\"\n                    ></span>` : \"\"}\n                <h2 class=\"onoper-group-card-title\">${title}</h2>\n            </div>\n            <div class=\"onoper-group-card-children\">\n                ${children}\n            </div>\n            <div\n                class=\"onoper-group-card-footer-container\"\n                data-has-content=\"${links.length > 0 || claims.length > 0 || comments.length > 0}\"\n            >\n                ${GroupCardFooter({ links, claims, comments })}\n            </div>\n        </div>\n    `;\n}\n\n// src/prebuild/components/organisms/Root/index.ts\nfunction Root(props) {\n  const { children } = props;\n  return html`\n        <div class='onoper-root'>\n            <div class='onoper-viewport'>\n                ${children}\n            </div>\n        </div>\n    `;\n}\n\n// src/prebuild/components/molecules/SimpleCardFooter/index.ts\nclass SimpleCardFooterComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { links, claims, comments } = this.props;\n    return html`\n            <div class=\"onoper-simple-card-footer\">\n                <span class=\"onoper-simple-footer-actions\">\n                    ${ActivableButton({\n      activable: claims.length > 0,\n      label: \"Problemas\",\n      children: ClaimIcon({}),\n      style: `background-color: var(--CLAIM_COLOR);`\n    })}\n                    ${ActivableButton({\n      activable: comments.length > 0,\n      label: \"ComentÃ¡rios\",\n      children: CommentIcon({}),\n      style: `background-color: var(--COMMENT_COLOR);`\n    })}\n                </span>\n                <span class=\"onoper-simple-footer-links\">\n                    ${links.map((link) => `<span\n                            class=\"onoper-simple-footer-link\"\n                            aria-label=\"${link}\"\n                            style=\"background-color: ${generateColorFromId(link)};\"\n                        ></span>`).join(\"\")}\n                </span>\n            </div>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], SimpleCardFooterComponent.prototype, \"props\", undefined);\nSimpleCardFooterComponent = __legacyDecorateClassTS([\n  customElement(\"simple-card-footer\")\n], SimpleCardFooterComponent);\nfunction SimpleCardFooter(props) {\n  const element = new SimpleCardFooterComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/molecules/SimpleCardHeader/index.ts\nclass SimpleCardHeaderComponent extends LitElement {\n  render() {\n    if (!this.props)\n      return;\n    const { title, named, className } = this.props;\n    return html`\n            <div\n                class=\"onoper-simple-card-header ${className || \"\"}\"\n                ${named ? `data-named` : \"\"}\n            >\n                ${named ? `<span\n                        class=\"onoper-simple-card-header-named\"\n                        aria-label=\"${named}\"\n                        style=\"background-color: ${generateColorFromId(named)};\"\n                    ></span>` : \"\"}\n                <h3 class=\"onoper-simple-card-title\">${title}</h3>\n            </div>\n        `;\n  }\n}\n__legacyDecorateClassTS([\n  property({ attribute: false })\n], SimpleCardHeaderComponent.prototype, \"props\", undefined);\nSimpleCardHeaderComponent = __legacyDecorateClassTS([\n  customElement(\"simple-card-header\")\n], SimpleCardHeaderComponent);\nfunction SimpleCardHeader(props) {\n  const element = new SimpleCardHeaderComponent;\n  element.props = props;\n  return element.render();\n}\n\n// src/prebuild/components/organisms/SimpleCard/index.ts\nfunction _handleSelectClick(uid) {\n  const element = document.querySelector(`#id_${uid}`);\n  const attribute = element?.getAttribute(\"data-active\");\n  if (!element || !attribute)\n    return;\n  if (attribute === \"none\")\n    return;\n  element.setAttribute(\"data-active\", attribute === \"true\" ? \"false\" : \"true\");\n}\nfunction SimpleCard(props) {\n  const { named, title, links, claims, comments, className, uid } = props;\n  return html`\n        <div\n            id=\"id_${uid}\"\n            class=\"onoper-simple-card ${className || \"\"}\"\n            data-active=\"false\"\n            onclick=\"${() => _handleSelectClick(uid)}\"\n        >\n            ${SimpleCardHeader({ title, named })}\n            <div\n                class=\"onoper-simple-card-main\"\n                data-has-content=\"${claims.length > 0 || comments.length > 0}\"\n            >\n                ${ContentAccordion({\n    title: \"Problemas\",\n    list: claims,\n    icon: ActivableButton({\n      label: \"Problemas\",\n      activable: claims.length > 0,\n      style: `background-color: var(--CLAIM_COLOR);`,\n      children: ClaimIcon({})\n    })\n  })}\n                ${ContentAccordion({\n    title: \"ComentÃ¡rios\",\n    list: comments,\n    icon: ActivableButton({\n      label: \"ComentÃ¡rios\",\n      activable: comments.length > 0,\n      style: `background-color: var(--COMMENT_COLOR);`,\n      children: CommentIcon({})\n    })\n  })}\n            </div>\n            <div\n                class=\"onoper-simple-card-footer-container\"\n                data-has-content=\"${links.length > 0 || claims.length > 0 || comments.length > 0}\"\n            >\n                ${SimpleCardFooter({ links, claims, comments })}\n            </div>\n        </div>\n    `;\n}\n\n// src/prebuild/entry.ts\nvar ComponentRegistry = {\n  GroupCard: (props) => GroupCard(props),\n  Root: (props) => Root(props),\n  SimpleCard: (props) => SimpleCard(props)\n};\nexport {\n  ComponentRegistry\n};\n";
export const DEP_STYLE = "@import \"https://fonts.googleapis.com/css2?family=Jost:ital,wght@0,100..900;1,100..900&display=swap\";\n\n/* src/prebuild/components/organisms/GroupCard/styles.css */\n.onoper-group-card {\n  background-color: var(--BACKGROUND_COLOR);\n  border: 1px solid var(--BACKGROUND_ALT_COLOR);\n  box-shadow: var(--BOX_SHADOW);\n  display: flex;\n  border-radius: var(--OVER_ROUNDED);\n  overflow: hidden;\n  flex-direction: column;\n  width: max-content;\n  min-width: min-content;\n  padding: 0;\n}\n\n.onoper-group-card-header {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items:  center;\n  gap: 6px;\n  padding-top: 12px;\n  padding-bottom: 36px;\n}\n\n.onoper-group-card-header .onoper-group-card-title {\n  width: max-content;\n  max-width: 100%;\n  padding-left: 12px;\n  padding-right: 12px;\n}\n\n.onoper-group-card-header[data-named] {\n  padding-top: 0;\n}\n\n.onoper-group-card-header-named {\n  flex-shrink: 0;\n  width: 100%;\n  height: 12px;\n}\n\n.onoper-group-card-children {\n  display: flex;\n  align-items:  center;\n  gap: 42px;\n  width: 100%;\n  height: 100%;\n  padding: 0 12px 12px;\n}\n\n.onoper-group-card-children > * {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.onoper-group-card-footer-container {\n  padding: 24px 12px 12px;\n}\n\n.onoper-group-card-footer-container[data-has-content=\"false\"] {\n  display: none;\n}\n\n/* src/prebuild/components/molecules/GroupCardFooter/styles.css */\n.onoper-group-card-footer {\n  display: flex;\n  align-items:  start;\n  gap: 8px;\n}\n\n.onoper-group-card-footer > * {\n  width: max-content;\n  max-width: 100%;\n}\n\n.onoper-group-card-footer .onoper-content-accordion-header {\n  max-width: max-content;\n}\n\n.onoper-group-footer-links {\n  display: flex;\n  align-items:  center;\n  gap: -3px;\n}\n\n.onoper-group-footer-link {\n  border-radius: var(--MIDDLE_ROUNDED);\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n}\n\n/* src/prebuild/components/molecules/ActivableButton/styles.css */\n.onoper-activable-button {\n  display: flex;\n  cursor: pointer;\n  border-radius: var(--MIDDLE_ROUNDED);\n  border: none;\n  justify-content: center;\n  align-items:  center;\n  padding: 2px;\n}\n\n.onoper-activable-button:disabled {\n  opacity: .1;\n  cursor: not-allowed;\n}\n\n.onoper-button-label {\n  opacity: 0;\n  position: absolute;\n  pointer-events: none;\n}\n\n/* src/prebuild/components/molecules/ContentAccordion/styles.css */\n.onoper-content-accordion {\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n}\n\n.onoper-content-accordion-header {\n  display: flex;\n  cursor: pointer;\n  background-color: var(--BACKGROUND_ALT_COLOR);\n  border-radius: var(--MIDDLE_ROUNDED);\n  align-items:  center;\n  gap: 12px;\n  padding: 4px 6px;\n}\n\n.onoper-content-accordion-header .accordion-toggle {\n  display: none;\n}\n\n.onoper-content-accordion-body {\n  padding-left: 32px;\n}\n\n.onoper-content-accordion[data-active=\"true\"] .onoper-content-accordion-body {\n  display: flex;\n}\n\n.onoper-content-accordion[data-active=\"false\"] .onoper-content-accordion-body {\n  display: none;\n}\n\n/* src/prebuild/components/organisms/Root/styles.css */\n.onoper-root {\n  display: flex;\n  overflow: hidden;\n  justify-content: center;\n  align-items:  center;\n  width: 100%;\n  height: 100%;\n}\n\n.onoper-viewport {\n  display: flex;\n  background-color: var(--ROOT_BACKGROUND_COLOR);\n  flex-direction: column;\n  justify-content: center;\n  align-items:  center;\n  gap: 42px;\n  width: min-content;\n  height: min-content;\n  margin: auto;\n  padding: 24px;\n}\n\n/* src/prebuild/components/organisms/SimpleCard/styles.css */\n.onoper-simple-card {\n  background-color: var(--BACKGROUND_COLOR);\n  border: 1px solid var(--BACKGROUND_ALT_COLOR);\n  box-shadow: var(--BOX_SHADOW);\n  display: flex;\n  border-radius: var(--EXTERN_ROUNDED);\n  flex-direction: column;\n  gap: 12px;\n  width: max-content;\n  min-width: 180px;\n  max-width: 280px;\n  padding: 12px;\n}\n\n.onoper-simple-card-main {\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-height: 9999px;\n  transition: all .3s ease-in-out;\n}\n\n.onoper-simple-card-main[data-has-content=\"false\"] {\n  display: none;\n}\n\n.onoper-simple-card-footer-container {\n  opacity: 1;\n  max-height: 9999px;\n  transition: all .3s;\n}\n\n.onoper-simple-card-footer-container[data-has-content=\"false\"] {\n  display: none;\n}\n\n.onoper-simple-card[data-active=\"true\"] .onoper-simple-card-footer-container, .onoper-simple-card:hover .onoper-simple-card-footer-container {\n  opacity: 0;\n  max-height: 0;\n}\n\n.onoper-simple-card[data-active=\"true\"] .onoper-simple-card-header h3, .onoper-simple-card:hover .onoper-simple-card-header h3 {\n  -webkit-line-clamp: 5;\n  line-clamp: 5;\n}\n\n.onoper-simple-card[data-active=\"false\"] .onoper-simple-card-main {\n  opacity: 0;\n  max-height: 0;\n}\n\n.onoper-simple-card[data-active=\"true\"] {\n  border: 1px solid var(--ACTIVE_COLOR);\n}\n\n.onoper-simple-card:hover .onoper-simple-card-main {\n  position: relative;\n  opacity: 1;\n  max-height: 9999px;\n}\n\n/* src/prebuild/components/molecules/SimpleCardFooter/styles.css */\n.onoper-simple-card-footer {\n  display: flex;\n  justify-content: space-between;\n  align-items:  center;\n}\n\n.onoper-simple-footer-actions {\n  display: flex;\n  align-items:  center;\n  gap: 8px;\n}\n\n.onoper-simple-footer-links {\n  display: flex;\n  align-items:  center;\n  gap: -3px;\n}\n\n.onoper-simple-footer-link {\n  border-radius: var(--MIDDLE_ROUNDED);\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n}\n\n/* src/prebuild/style/global.css */\n:root {\n  --BOX_SHADOW: 0 1px 3px #0000001a;\n  --OVER_ROUNDED: 16px;\n  --EXTERN_ROUNDED: 12px;\n  --MIDDLE_ROUNDED: 9px;\n  --INTERN_ROUNDED: 6px;\n  --CLAIM_COLOR: #fbd5d5;\n  --COMMENT_COLOR: #fdedca;\n  --BACKGROUND_COLOR: #f9f9f9;\n  --BACKGROUND_ALT_COLOR: #f1f1f1;\n  --ROOT_BACKGROUND_COLOR: #fff;\n  --ACTIVE_COLOR: #a8c9d1;\n}\n\n* {\n  box-sizing: border-box;\n  font-optical-sizing: auto;\n  margin: 0;\n  padding: 0;\n  font-family: Jost, sans-serif;\n  font-style: normal;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-weight: 500;\n}\n\nh1 {\n  font-size: 24px;\n}\n\nh2 {\n  font-size: 20px;\n}\n\nh3 {\n  font-size: 16px;\n}\n\nh4, h5, h6 {\n  font-size: 14px;\n}\n\np {\n  font-size: 16px;\n  font-weight: 400;\n}\n\n/* src/prebuild/components/molecules/SimpleCardHeader/styles.css */\n.onoper-simple-card-header {\n  display: flex;\n  position: relative;\n  background-color: var(--BACKGROUND_ALT_COLOR);\n  border-radius: var(--MIDDLE_ROUNDED);\n  align-items:  center;\n  gap: 12px;\n  width: max-content;\n  max-width: 100%;\n  padding: 4px 8px;\n}\n\n.onoper-simple-card-header h3 {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  line-clamp: 2;\n  -webkit-box-orient: vertical;\n}\n\n.onoper-simple-card-header[data-named] {\n  padding-left: 4px;\n}\n\n.onoper-simple-card-header[data-named] h3 {\n  text-indent: calc(24px + 12px);\n}\n\n.onoper-simple-card-header-named {\n  position: absolute;\n  border-radius: var(--INTERN_ROUNDED);\n  flex-shrink: 0;\n  width: 24px;\n  height: 24px;\n  top: 4px;\n}\n";
